%ul#scrolly

%ul#scrollyHider{:style => "display:none;"}
  - list_classes = ['notice','success','error','info']
  - 1.upto(50) do |i|
    %li{:class => list_classes[rand(4)]}
      .content
        %p== I yam thing #{i} and I yam        
        
:javascript
  var bottom_y = 1000;
  var top_y = -100;
  var fps = 50;
  var animation_interval = 1000. / fps;
  var garbage_collection_interval = 1000;
  var insertion_interval = 300;
  var collision_detection_interval = 100;
  
  var height = 49;
  var width = 204;
  var bubbles = {};
  var next_bubbles_index = 0;
  
  var getBubbleId = function(bubble){
    return bubble.selector.attr("data_bubble_id");
  }
  
  var insertNextBubble = function(){
      // Store the new bubble.
      var selector = $('#scrollyHider li:first-child');
      if(selector.length !== 0){
        
        // Choose start parameters.
        var start_left = Math.floor(Math.random()*800);
        var start_velocity = .05 + Math.random()*.1;
        var start_right = start_left + width;
  
        // Compute the blocker candidates.
        var blocker_candidates = [];
        _.each(bubbles, function(b){
          if( (start_left <= b.left && start_right > b.left) || (start_right >= b.right && start_left < b.right) ){
            // Add to blocker candidates list.
            blocker_candidates.push(b);
          }
        });
  
        // Compute the blocker.
        var blocker_y = -100000;
        var blocker = false;
        _.each(blocker_candidates, function(b){
          var b_y = b.selector.position().top
          if(b_y > blocker_y){
            blocker_y = b_y;
            blocker = getBubbleId(b);
          }    
        });
  
        // Save the bubble data.
        bubbles[next_bubbles_index] = {
          selector : selector, 
          blocker : blocker,
          left : start_left,
          right : start_right,
          velocity : start_velocity
        }
        
        // Save bubble id in dom.
        selector.attr("data_bubble_id", next_bubbles_index);
                      
        // Insert the new bubble and start animating it.
        var time_to_top = (bottom_y - top_y) / start_velocity;
        selector.css('left', start_left).css('top', bottom_y + 'px').prependTo('#scrolly');
        
        next_bubbles_index = next_bubbles_index + 1;
    }
  }
  
  var animateBubbles = function(){
    _.each(bubbles, function(b){
      var old_top = b.selector.position().top;
      b.selector.css("top", (old_top - (b.velocity * animation_interval)) + "px");
    });
  }
  
  var collectGarbage = function(){
    // Remove any bubbles that are above the top or below the bottom of the page.
    _.each(bubbles, function(b){
      var top = b.selector.position().top;
      if(top < top_y || top > bottom_y){
        delete bubbles[getBubbleId(b)];
        b.selector.appendTo("#scrollyHider");
      }
    });
  }
    
  var handleCollisions = function(){
    _.each(bubbles, function(b){
      
      var blocker_id = b.blocker;
      
      // Check if this bubble has collided.
      if(blocker_id && bubbles[blocker_id] !== undefined){
        var bubble_id = getBubbleId(b);
        var b_top = b.selector.position().top;
        var blocker_bottom = bubbles[blocker_id].selector.position().top + height;
                
        if(b_top < blocker_bottom){
                
          // Remove bubble.
          delete bubbles[bubble_id];
          b.selector.appendTo("#scrollyHider");
          
          // Remove blocker.
          bubbles[blocker_id].selector.appendTo("#scrollyHider");
          delete bubbles[blocker_id];
        
        }
      }
    });
  }
  setInterval(animateBubbles, animation_interval);
  setInterval(insertNextBubble, insertion_interval);
  setInterval(handleCollisions, collision_detection_interval);
  setInterval(collectGarbage, garbage_collection_interval);

