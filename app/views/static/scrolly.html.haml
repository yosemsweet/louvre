%div{:style => "width:1000px; height:800px; overflow: hidden;"}
  %ul#scrolly

  %ul#scrollyHider{:style => "display:none;"}
    - list_classes = ['notice','success','error','info']
    - 1.upto(10) do |i|
      %li{:class => list_classes[rand(4)]}
        .content
          %p== I yam thing #{i} and I yam        
        
:javascript
  var bottom_y = 1000;
  var top_y = 0;
  var fps = 50;
  var animation_interval = 1000. / fps;
  var garbage_collection_interval = 500;
  var insertion_interval = 700;
  var collision_detection_interval = 100;
  
  var height = 49;
  var width = 204;
  var bubbles = {};
  var next_bubbles_index = 0;
  
  var getBubbleId = function(bubble){
    return bubble.selector.attr("data_bubble_id");
  }
  
  var insertNextBubble = function(){
      // Store the new bubble.
      var selector = $('#scrollyHider li:first-child');
      if(selector.length !== 0){
        
        // Choose start parameters.
        var start_left = Math.floor(Math.random()*800);
        var start_velocity = .05 + Math.random()*.1;
        var start_right = start_left + width;
        var mass = 1 + Math.random()*255;
        
        selector.css("background-color","rgb("+ Math.floor(mass) + "," + Math.floor(mass) + "," + Math.floor(mass) + ")");
        console.log("rgb("+ Math.floor(mass) + "," + Math.floor(mass) + "," + Math.floor(mass) + ")");
        // selector.css("background-color","blue");
  
        // Compute the blocker candidates.
        var blocker_candidates_left = [];
        _.each(bubbles, function(b){
          if(start_left <= b.left && start_right > b.left){
            // Add to blocker candidates list.
            blocker_candidates_left.push(b);
          }
        });
        
        // Compute the blocker candidates.
        var blocker_candidates_right = [];
        _.each(bubbles, function(b){
          if(start_right >= b.right && start_left < b.right){
            // Add to blocker candidates list.
            blocker_candidates_right.push(b);
          }
        });

        // Compute the left blocker.
        var blocker_y = -100000;
        var blocker_left = false;
        _.each(blocker_candidates_left, function(b){
          var b_y = b.selector.position().top
          if(b_y > blocker_y){
            blocker_y = b_y;
            blocker_left = getBubbleId(b);
          }    
        });

        // Compute the right blocker.
        var blocker_y = -100000;
        var blocker_right = false;
        _.each(blocker_candidates_right, function(b){
          var b_y = b.selector.position().top
          if(b_y > blocker_y){
            blocker_y = b_y;
            blocker_right = getBubbleId(b);
          }    
        });

        // Save the bubble data.
        bubbles[next_bubbles_index] = {
          selector : selector, 
          blocker_left : blocker_left,
          blocker_right : blocker_right,
          left : start_left,
          right : start_right,
          velocity : start_velocity,
          mass : mass
        }
        
        // Save bubble id in dom.
        selector.attr("data_bubble_id", next_bubbles_index);
                      
        // Insert the new bubble and start animating it.
        var time_to_top = (bottom_y - top_y) / start_velocity;
        selector.css('left', start_left).css('top', bottom_y + 'px').prependTo('#scrolly');
        
        next_bubbles_index = next_bubbles_index + 1;
    }
  }
  
  var animateBubbles = function(){
    _.each(bubbles, function(b){
      var old_top = b.selector.position().top;
      b.selector.css("top", (old_top - (b.velocity * animation_interval)) + "px");
    });
  }
  
  var collectGarbage = function(){
    // Remove any bubbles that are above the top or below the bottom of the page.
    _.each(bubbles, function(b){
      var top = b.selector.position().top;
      if(top <= top_y || top > bottom_y){
        delete bubbles[getBubbleId(b)];
        b.selector.appendTo("#scrollyHider");
      }
    });
  }
    
  var handleCollisions = function(){
    _.each(bubbles, function(b){
      
      var blocker_id = b.blocker_left;
      var b_top = b.selector.position().top;
      var bubble_id = getBubbleId(b);
      
      // Check if this bubble has collided.
      if(blocker_id && bubbles[blocker_id] !== undefined){
        
        var blocker_bottom = bubbles[blocker_id].selector.position().top + height;
        
        if(b_top < blocker_bottom){
          // bubbles[blocker_id].velocity = b.velocity * 1.5;
          // b.velocity = bubbles[blocker_id].velocity * 0.3;
          
          v1_i = b.velocity;
          v2_i = bubbles[blocker_id].velocity;
          m1 = b.mass;
          m2 = bubbles[blocker_id].mass;

          var v1_f = ((m1 - m2)*v1_i + 2*m2*v2_i)/(m1 + m2);
          var v2_f = ((2*(m1*v1_i) - (m1 - m2)*v2_i))/(m1 + m2);

          // Elastic force.
          var d = blocker_bottom - b_top;
          var k = .01;
          v1_f = v1_f - k*d/(2*m1);
          v2_f = v2_f + k*d/(2*m2);

          b.velocity = v1_f;
          bubbles[blocker_id].velocity = v2_f;
          // bubbles[blocker_id].selector.css("top", b_top - height - 1 + "px");
          // if (bubbles[blocker_id].velocity < 0.001) {bubbles[blocker_id].velocity = 0.001;}
          // if (b.velocity < 0.001) {b.velocity = 0.001;}   

        }
      }

      var blocker_id = b.blocker_right;

      if(blocker_id && bubbles[blocker_id] !== undefined){

        var blocker_bottom = bubbles[blocker_id].selector.position().top + height;

        if(b_top < blocker_bottom){
          
          v1_i = b.velocity;
          v2_i = bubbles[blocker_id].velocity;
          m1 = b.mass;
          m2 = bubbles[blocker_id].mass;

          var v1_f = ((m1 - m2)*v1_i + 2*m2*v2_i)/(m1 + m2);
          var v2_f = ((2*(m1*v1_i) - (m1 - m2)*v2_i))/(m1 + m2);

          // Elastic force.
          var d = blocker_bottom - b_top;
          var k = .01;
          v1_f = v1_f - k*d/(2*m1);
          v2_f = v2_f + k*d/(2*m2);

          b.velocity = v1_f;
          bubbles[blocker_id].velocity = v2_f;
          // bubbles[blocker_id].selector.css("top", b_top - height - 1 + "px");
          
          // if (bubbles[blocker_id].velocity < 0.001) {bubbles[blocker_id].velocity = 0.001;}
          // if (b.velocity < 0.001) {b.velocity = 0.001;}   

        }
      }

    });
  }
  setInterval(animateBubbles, animation_interval);
  setInterval(insertNextBubble, insertion_interval);
  setInterval(handleCollisions, collision_detection_interval);
  setInterval(collectGarbage, garbage_collection_interval);

